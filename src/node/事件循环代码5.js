console.log('1');

setTimeout(() => {
  console.log('2');
}, 1000);

for (let i = 0; i < 1000000000; i++) {
  // do something
}

console.log('3');
// 答：输出为 1、3、2。首先输出 1，然后执行 for 循环，由于该循环耗时较长，阻塞了事件循环，
// 因此定时器的回调函数无法在指定的时间内执行。接着输出 3，最后在下一个宏任务中，定时器回调函数才会被执行，输出 2。

// 需要注意的是，在事件循环中，长时间运行的操作会导致事件循环的阻塞，从而影响其他宏任务和微任务的执行。因此，在编写代码时
// ，应该避免这种情况的发生，以提高应用程序的性能。